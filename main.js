const express = require('express');
const app = express();
const path = require('path');
const mongoose = require('mongoose');

app.use(express.static(path.join(__dirname, 'pages')));
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'pages', 'main.html'));
  });

app.listen(3000);



// üîå –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
mongoose.connect('mongodb://localhost:27017/brodb')
  .then(() => console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB'))
  .catch((err) => console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:', err));

// üì¶ –°—Ö–µ–º–∞ —é–∑–µ—Ä–∞
const userSchema = new mongoose.Schema({
  name: { type: String, required: true },
  age: Number,
  email: { type: String, unique: true }
});

// üî® –ú–æ–¥–µ–ª—å
const User = mongoose.model('User', userSchema);

// ‚ûï –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —é–∑–µ—Ä–∞
const bro = new User({
  name: '–ë—Ä–æ',
  age: 18,
  email: 'bro@example.com'
});

bro.save()
  .then(() => {
    console.log('üôå –Æ–∑–µ—Ä–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!');
    mongoose.disconnect(); // –≤—ñ–¥–∫–ª—é—á–∏–º–æ—Å—å –ø—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
  })
  .catch((err) => {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:', err);
  });
